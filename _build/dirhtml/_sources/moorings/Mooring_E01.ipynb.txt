{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "254f3547-ad51-408d-ab97-471210b8f2f4",
   "metadata": {},
   "source": [
    "## E01\n",
    "\n",
    "This page is a python notebook!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2dc9cbcd-27e0-4c6a-b81a-2fe3005ce17c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import erddapy\n",
    "from erddapy import ERDDAP\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xarray\n",
    "import cf_xarray\n",
    "import datetime\n",
    "import netCDF4\n",
    "from netCDF4 import Dataset\n",
    "\n",
    "import matplotlib\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "15fd92a6-036b-4014-a271-9775c7264642",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_erddap_data(erddap_url, dataset, data_protocol=\"griddap\", variables=None, constraints=None):\n",
    "    \"\"\"\n",
    "    Function: get_erddap_data\n",
    "    This function uses the erddapy python library to access data from ERDDAP servers,\n",
    "    and to return it to users in convenient formats for python users.\n",
    "    Data can be pulled from \"tabledap\" or \"griddap\" formats, with different\n",
    "    output types, depending on the dap type.\n",
    "    \n",
    "    Inputs:\n",
    "    erddap_url    - The url address of the erddap server to pull data from\n",
    "    variables     - The selected variables within the dataset.\n",
    "    data_protocol - The erddap data protocol for the chosen dataset.\n",
    "                    Options include \"tabledap\" or \"griddap\"\n",
    "                    The default option is given as \"griddap\"\n",
    "    dataset       - The ID for the relevant dataset on the erddap server\n",
    "                    If no variables are given, it is assumed that all variables\n",
    "                    will be pulled.\n",
    "    constraints   - These are set by the user to help restrict the data pull\n",
    "                    to only the area and timeframe of interest.\n",
    "                    If no constraints are given, all data in a dataset is pulled.\n",
    "                    Constraints should be given as a dictionary, where\n",
    "                    each entry is a bound and/or selection of a specific axis variable\n",
    "                    Exs. {\"longitude<=\": \"min(longitude)+10\", \"longitude>=\": \"0\"}\n",
    "                         {\"longitude=\": \"140\", \"time>=\": \"max(time)-30\"}\n",
    "    \n",
    "    Outputs:\n",
    "    erddap_data   - This variable contains the pulled data from the erddap server.\n",
    "                    If the data_protocol is \"griddap\",  then erddap_data is an xarray dataset\n",
    "                    If the data_protocol is \"tabledap\", then erddap_data is a pandas dataframe\n",
    "    \"\"\"\n",
    "    \n",
    "    import erddapy\n",
    "    from erddapy import ERDDAP\n",
    "    import pandas as pd\n",
    "    import xarray\n",
    "    \n",
    "    \n",
    "    ############################################\n",
    "    # Set-up the connection to the ERDDAP server\n",
    "    ############################################\n",
    "    \n",
    "    # Connect to the erddap server\n",
    "    e = ERDDAP(server=erddap_url, protocol=data_protocol, response='csv')\n",
    "    \n",
    "    # Identify the dataset of interest\n",
    "    e.dataset_id = dataset\n",
    "    \n",
    "    \n",
    "    #########################################\n",
    "    # Pull the data, based upon protocol type\n",
    "    #########################################\n",
    "    \n",
    "    # GRIDDAP Protocol\n",
    "    if data_protocol == \"griddap\":\n",
    "        \n",
    "        # Initialize the connection\n",
    "        e.griddap_initialize()\n",
    "\n",
    "        # Update the constraints\n",
    "        if constraints is not None:\n",
    "            e.constraints.update(constraints)\n",
    "            e.griddap_initialize()\n",
    "            \n",
    "        # Update the selection of the variables\n",
    "        if variables is not None:\n",
    "            e.variables = variables\n",
    "\n",
    "        erddap_data = e.to_xarray()\n",
    "    \n",
    "    # TABLEDAP Protocol\n",
    "    elif data_protocol == \"tabledap\":\n",
    "\n",
    "        # Update the constraints\n",
    "        if constraints is not None:\n",
    "            e.constraints = constraints\n",
    "            \n",
    "        # Update the selection of the variables\n",
    "        if variables is not None:\n",
    "            e.variables = variables\n",
    "            \n",
    "        erddap_data = e.to_pandas()\n",
    "    \n",
    "    # Invalid protocol given\n",
    "    else:\n",
    "        print('Invalid ERDDAP protocol. Given protocol is: ' + data_protocol)\n",
    "        print('Valid protocols include \"griddap\" or \"tabledap\". Please restart and try again with a valid protocol')\n",
    "        erddap_data = None\n",
    "    \n",
    "    \n",
    "    #############################\n",
    "    return erddap_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "63380333-cd77-4cb4-b1ac-0e93eb50e792",
   "metadata": {},
   "outputs": [],
   "source": [
    "nwem_url = 'http://nwem.apl.washington.edu/erddap'\n",
    "\n",
    "nwem_dataset = 'orca3_L3_depthgridded_025'\n",
    "\n",
    "variables = [\"sea_water_temperature\",\n",
    "             \"sea_water_practical_salinity\"]\n",
    "\n",
    "constraints = {\"cast_start_time>=\":datetime.datetime(2022,1,1).strftime('%Y-%m-%dT%H:%M:%SZ')}\n",
    "#constraints = {\"cast_start_time>=\": \"max(cast_start_time)-365\"}\n",
    "\n",
    "nwem_grid = get_erddap_data(nwem_url, nwem_dataset, \n",
    "                variables=variables, \n",
    "                constraints=constraints,\n",
    "                data_protocol=\"griddap\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9fc7b99c-1fd9-4cdc-ab53-f4d072903a4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "cioos_url = 'https://data.cioospacific.ca/erddap'\n",
    "cioos_dataset = 'IOS_CTD_Moorings'\n",
    "\n",
    "variables = [\"time\",\n",
    "             \"sea_water_pressure\",\n",
    "             \"sea_water_temperature\",\n",
    "             \"sea_water_practical_salinity\"]\n",
    "\n",
    "#constraints = {\"time>=\":datetime.datetime(2022,1,1).strftime('%Y-%m-%dT%H:%M:%SZ')}\n",
    "constraints = {\"time>=\": \"max(time)-365\"}\n",
    "\n",
    "cioos_table = get_erddap_data(cioos_url, cioos_dataset, \n",
    "                variables=variables,\n",
    "                constraints=constraints,\n",
    "                data_protocol=\"tabledap\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6ee6c53d-d23d-400c-8618-c25d0e7bd32d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6a05f98550>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nwem_grid.sea_water_temperature.sel(depth=30).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae5f0036-0dc8-49d1-8f40-233eafff1bfc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
